(require-module "japanese")
(require-module "skk")

;; (define enable-lazy-loading?                #t)
;; (define enabled-im-list                     '(skk))

;; custom-global.scm
(define custom-activate-default-im-name?    #t)
(define custom-preserved-default-im-name    'skk)
(define default-im-name                     'skk)
(define enable-im-switch?                   #f)
(define enable-im-toggle?                   #f)
(define uim-color                           'uim-color-uim)
(define candidate-window-style              'horizontal)
(define candidate-window-position           'caret)
(define bridge-show-input-state?            #t)
(define bridge-show-with?                   'time)
(define bridge-show-input-state-time-length 1)

;; custom-toolbar.scm
(define toolbar-display-time 'never)

;; custom-annotation.scm
(define enable-annotation? #f)

;; custom-ja-rk-rule.scm
(define ja-rk-rule-type            'uim)
(define ja-rk-rule-keep-consonant? #t)

;; custom-global-keys1.scm
(define-key generic-on-key?             '("<Control> " "zenkaku-hankaku"))
(define-key generic-off-key?            '("<Control> " "zenkaku-hankaku"))
(define-key generic-begin-conv-key?     '("<Control>n" " " "down"))
(define-key generic-commit-key?         '("<Control>j" "<Control>m" "return"))
(define-key generic-cancel-key?         '("<Control>g" "<Control>[" "escape"))
(define-key generic-next-candidate-key? '("<Control>n" " " "down"))
(define-key generic-prev-candidate-key? '("<Control>p" "<Shift> " "up"))
(define-key generic-next-page-key?      '("next"))
(define-key generic-prev-page-key?      '("prior"))

;;-key custom-global-keys2.scm
(define-key generic-beginning-of-preedit-key? '("<Control>a" "home"))
(define-key generic-end-of-preedit-key?       '("<Control>e" "end"))
(define-key generic-kill-key?                 '("<Control>k"))
(define-key generic-kill-backward-key?        '("<Control>u"))
(define-key generic-backspace-key?            '("<Control>h" "backspace"))
(define-key generic-delete-key?               '("<Control>d" "delete"))
(define-key generic-go-left-key?              '("<Control>b" "left"))
(define-key generic-go-right-key?             '("<Control>f" "right"))
(define-key generic-return-key?               '("<Control>m" "return"))

;; custom-skk.scm
(define skk-use-candidate-window?            #t)
(define skk-commit-candidate-by-label-key?   #t)
(define skk-candidate-selection-style        'ddskk-like)
(define skk-use-manual-candwin-setting?      #t)
(define skk-candidate-op-count               3)
(define skk-widgets                          '(widget_skk_input_mode))
(define default-widget_skk_input_mode        'action_skk_latin)
(define skk-input-mode-actions               '( action_skk_latin
                                                action_skk_hiragana
                                                action_skk_katakana
                                                action_skk_hankana
                                                action_skk_wide_latin))
(define default-widget_skk_kana_input_method 'action_skk_roma)
(define skk-kana-input-method-actions        '(action_skk_roma))

;; custom-skk-dict.scm
(define skk-use-skkserv?              #f)
(define skk-dic-file-name             "/usr/share/skk/SKK-JISYO")
(define skk-personal-dic-filename     "/home/tounai/.skk-jisyo")
(define skk-uim-personal-dic-filename "/home/tounai/.skk-uim-jisyo")

;; custom-skk-advanced.scm
(define skk-style                       'skk-style-ddskk-like)
(define skk-use-recursive-learning?     #t)
(define skk-use-numeric-conversion?     #t)
(define skk-auto-start-henkan?          #f)
(define skk-dcomp-activate?             #t)
(define skk-use-look?                   #f)
(define skk-show-annotation?            #f)
(define skk-show-annotation-in-preedit? #f)
(define skk-use-with-vi?                #t)
(define skk-egg-like-newline?           #f)
(define skk-commit-newline-explicitly?  #f)

;; custom-skk-keys1.scm
(define-key skk-on-key?           '("<Control>j" "<Control> " "zenkaku-hankaku"))
(define-key skk-latin-key?        '("l"          "<Control> " "zenkaku-hankaku"))
(define-key skk-wide-latin-key?   '("L"))
(define-key skk-kcode-input-key?  '("yen"))
(define-key skk-kanji-mode-key?   '())
(define-key skk-hankaku-kana-key? '("Q"))
(define-key skk-kana-toggle-key?  '("q"))
(define-key skk-begin-conv-key?   '("<Control>n" " " "down"))
(define-key skk-commit-key?       '("<Control>j"))
(define-key skk-cancel-key?       '("<Control>g" "<Control>[" "escape"))
(define-key skk-sticky-key?       '(";"))

;; custom-skk-keys2.scm
(define-key skk-return-key?                           '("<Control>m" "return"))
(define-key skk-latin-conv-key?                       '("/"))
(define-key skk-conv-wide-latin-key?                  '())
(define-key skk-conv-opposite-case-key?               '())
(define-key skk-begin-completion-key?                 '("<Control>i" "tab"))
(define-key skk-next-completion-key?                  '("<Control>i" "tab"))
(define-key skk-prev-completion-key?                  '("<Control>u" "<Shift>tab"))
(define-key skk-new-completion-from-current-comp-key? '("<Control>o"))
(define-key skk-special-midashi-key?                  '(">" "<"))
(define-key skk-vi-escape-key?                        '("<Control>[" "escape"))
(define-key skk-state-direct-no-preedit-nop-key?      '("<Control>j"))
(define-key skk-purge-candidate-key?                  '("X"))

;; custom-skk-keys3.scm
(define-key skk-begin-conv-with-completion-key?  '())
(define-key skk-commit-with-conv-completion-key? '())
(define-key skk-next-candidate-key?              '("<Control>n" " " "down"))
(define-key skk-prev-candidate-key?              '("<Control>p" "<Shift> " "up" "x"))
(define-key skk-next-page-key?                   '("next"))
(define-key skk-prev-page-key?                   '("prior"))
(define-key skk-backspace-key?                   '("<Control>h" "backspace"))
(define-key skk-go-left-key?                     '("<Control>b" "left"))
(define-key skk-go-right-key?                    '("<Control>f" "right" ))

;; vim: ft=scheme fenc=euc-jp
