;; custom-global.scm
(define custom-activate-default-im-name? #t)
(define custom-preserved-default-im-name 'skk)
(define default-im-name 'skk)
(define enabled-im-list '(skk))
(define enable-im-switch? #t)
(define switch-im-key '("<Control>Shift_key" "<Shift>Control_key"))
(define switch-im-key? (make-key-predicate '("<Control>Shift_key" "<Shift>Control_key")))
(define switch-im-skip-direct-im? #f)
(define enable-im-toggle? #t)
(define toggle-im-key '("<Meta> " "<Control> "))
(define toggle-im-key? (make-key-predicate '("<Meta> " "<Control> ")))
(define toggle-im-alt-im 'skk)
(define uim-color 'uim-color-uim)
(define candidate-window-style 'horizontal)
(define candidate-window-position 'caret)
(define enable-lazy-loading? #t)
(define bridge-show-input-state? #t)
(define bridge-show-with? 'time)
(define bridge-show-input-state-time-length 1)

;; custom-toolbar.scm
(define toolbar-display-time 'never)
(define toolbar-show-action-based-switcher-button? #t)
(define imsw-coverage 'system-global)
(define toolbar-show-switcher-button? #f)
(define toolbar-show-pref-button? #t)
(define toolbar-show-dict-button? #f)
(define toolbar-show-input-pad-button? #f)
(define toolbar-show-handwriting-input-pad-button? #f)
(define toolbar-show-help-button? #f)
(define toolbar-help-browser 'system)
(define toolbar-help-browser-name "firefox")
(define toolbar-icon-for-dark-background? #f)

;; custom-annotation.scm
(define skk-show-annotation? #f)
(define skk-show-annotation-in-preedit? #f)
(define enable-annotation? #f)
(define annotation-agent 'eb)
(define eb-enable-for-annotation? #f)
(define annotation-eb-dic-path "/usr/share/dict")
(define annotation-dict-server "dict.org")
(define annotation-dict-servname 2628)
(define annotation-dict-database "web1913")
(define annotation-dict-cache-words 256)
(define annotation-filter-server-setting? 'pipe)
(define annotation-filter-unix-domain-socket-path "/path/of/socket")
(define annotation-filter-tcpserver-name "localhost")
(define annotation-filter-tcpserver-port 6789)
(define annotation-filter-command "/path/of/filter-program")

;; custom-xim.scm
(define uim-xim-use-xft-font? #f)
(define uim-xim-xft-font-name "Sans")

;; custom-notify.scm
(define notify-agent 'stderr)

;; custom-http.scm
(define http-proxy-setting 'direct)
(define http-proxy-hostname "localhost")
(define http-proxy-port 8080)
(define http-timeout 3000)

;; custom-predict.scm
(define predict-custom-enable? #f)
(define predict-custom-methods '())
(define predict-custom-look-dict "/usr/share/dict/words")
(define predict-custom-look-candidates-max 10)
(define predict-custom-look-skk-jisyo "/usr/share/skk/SKK-JISYO.L")
(define predict-custom-look-skk-candidates-max 10)
(define predict-custom-sqlite3-candidates-max 5)
(define predict-custom-google-suggest-candidates-max 5)
(define predict-custom-google-suggest-language 'en)
(define predict-custom-google-suggest-use-ssl #t)

;; custom-ja-rk-rule.scm
(define ja-rk-rule-type 'uim)
(define ja-rk-rule-table-basic '(("-" "" "ー") ("," "" "、") ("." "" "。") ("!" "" "！") ("\"" "" "”") ("#" "" "＃") ("$" "" "＄") ("%" "" "％") ("&" "" "＆") ("'" "" "’") ("(" "" "（") (")" "" "）") ("~" "" "〜") ("=" "" "＝") ("^" "" "＾") ("\\" "" "＼") ("|" "" "｜") ("`" "" "‘") ("@" "" "＠") ("{" "" "｛") ("[" "" "「") ("+" "" "＋") (";" "" "；") ("*" "" "＊") (":" "" "：") ("}" "" "｝") ("]" "" "」") ("<" "" "＜") (">" "" "＞") ("?" "" "？") ("/" "" "／") ("_" "" "＿") ("yen" "" "￥") ("1" "" "1") ("2" "" "2") ("3" "" "3") ("4" "" "4") ("5" "" "5") ("6" "" "6") ("7" "" "7") ("8" "" "8") ("9" "" "9") ("0" "" "0") ("a" "" "あ") ("i" "" "い") ("u" "" "う") ("e" "" "え") ("o" "" "お") ("xa" "" "ぁ") ("xi" "" "ぃ") ("xyi" "" "ぃ") ("xu" "" "ぅ") ("xe" "" "ぇ") ("xye" "" "ぇ") ("xo" "" "ぉ") ("la" "" "ぁ") ("li" "" "ぃ") ("lu" "" "ぅ") ("le" "" "ぇ") ("lo" "" "ぉ") ("kk" "k" "っ") ("ka" "" "か") ("ki" "" "き") ("ku" "" "く") ("ke" "" "け") ("ko" "" "こ") ("kya" "" "きゃ") ("kyi" "" "きぃ") ("kyu" "" "きゅ") ("kye" "" "きぇ") ("kyo" "" "きょ") ("gg" "g" "っ") ("ga" "" "が") ("gi" "" "ぎ") ("gu" "" "ぐ") ("ge" "" "げ") ("go" "" "ご") ("gya" "" "ぎゃ") ("gyi" "" "ぎぃ") ("gyu" "" "ぎゅ") ("gye" "" "ぎぇ") ("gyo" "" "ぎょ") ("qa" "" "くぁ") ("qi" "" "くぃ") ("qu" "" "く") ("qe" "" "くぇ") ("qo" "" "くぉ") ("ss" "s" "っ") ("sa" "" "さ") ("si" "" "し") ("su" "" "す") ("se" "" "せ") ("so" "" "そ") ("sya" "" "しゃ") ("syi" "" "しぃ") ("syu" "" "しゅ") ("sye" "" "しぇ") ("syo" "" "しょ") ("zz" "z" "っ") ("za" "" "ざ") ("zi" "" "じ") ("zu" "" "ず") ("ze" "" "ぜ") ("zo" "" "ぞ") ("zya" "" "じゃ") ("zyi" "" "じぃ") ("zyu" "" "じゅ") ("zye" "" "じぇ") ("zyo" "" "じょ") ("jj" "j" "っ") ("ja" "" "じゃ") ("ji" "" "じ") ("ju" "" "じゅ") ("je" "" "じぇ") ("jo" "" "じょ") ("jya" "" "じゃ") ("jyi" "" "じぃ") ("jyu" "" "じゅ") ("jye" "" "じぇ") ("jyo" "" "じょ") ("tt" "t" "っ") ("tc" "c" "っ") ("ta" "" "た") ("ti" "" "ち") ("tu" "" "つ") ("te" "" "て") ("to" "" "と") ("tya" "" "ちゃ") ("tyi" "" "ちぃ") ("tyu" "" "ちゅ") ("tye" "" "ちぇ") ("tyo" "" "ちょ") ("tsa" "" "つぁ") ("tsi" "" "つぃ") ("tsu" "" "つ") ("tse" "" "つぇ") ("tso" "" "つぉ") ("cya" "" "ちゃ") ("cyi" "" "ちぃ") ("cyu" "" "ちゅ") ("cye" "" "ちぇ") ("cyo" "" "ちょ") ("xtu" "" "っ") ("xtsu" "" "っ") ("cc" "c" "っ") ("dd" "d" "っ") ("da" "" "だ") ("di" "" "ぢ") ("du" "" "づ") ("de" "" "で") ("do" "" "ど") ("dya" "" "ぢゃ") ("dyi" "" "ぢぃ") ("dyu" "" "ぢゅ") ("dye" "" "ぢぇ") ("dyo" "" "ぢょ") ("nn" "" "ん") ("n'" "" "ん") ("n" "" "ん") ("na" "" "な") ("ni" "" "に") ("nu" "" "ぬ") ("ne" "" "ね") ("no" "" "の") ("nya" "" "にゃ") ("nyi" "" "にぃ") ("nyu" "" "にゅ") ("nye" "" "にぇ") ("nyo" "" "にょ") ("hh" "h" "っ") ("ha" "" "は") ("hi" "" "ひ") ("hu" "" "ふ") ("he" "" "へ") ("ho" "" "ほ") ("hya" "" "ひゃ") ("hyi" "" "ひぃ") ("hyu" "" "ひゅ") ("hye" "" "ひぇ") ("hyo" "" "ひょ") ("ff" "f" "っ") ("fa" "" "ふぁ") ("fi" "" "ふぃ") ("fu" "" "ふ") ("fe" "" "ふぇ") ("fo" "" "ふぉ") ("fya" "" "ふゃ") ("fyi" "" "ふぃ") ("fyu" "" "ふゅ") ("fye" "" "ふぇ") ("fyo" "" "ふょ") ("bb" "b" "っ") ("ba" "" "ば") ("bi" "" "び") ("bu" "" "ぶ") ("be" "" "べ") ("bo" "" "ぼ") ("bya" "" "びゃ") ("byi" "" "びぃ") ("byu" "" "びゅ") ("bye" "" "びぇ") ("byo" "" "びょ") ("pp" "p" "っ") ("pa" "" "ぱ") ("pi" "" "ぴ") ("pu" "" "ぷ") ("pe" "" "ぺ") ("po" "" "ぽ") ("pya" "" "ぴゃ") ("pyi" "" "ぴぃ") ("pyu" "" "ぴゅ") ("pye" "" "ぴぇ") ("pyo" "" "ぴょ") ("mm" "m" "っ") ("mb" "b" "ん") ("mp" "p" "ん") ("ma" "" "ま") ("mi" "" "み") ("mu" "" "む") ("me" "" "め") ("mo" "" "も") ("mya" "" "みゃ") ("myi" "" "みぃ") ("myu" "" "みゅ") ("mye" "" "みぇ") ("myo" "" "みょ") ("yy" "y" "っ") ("ya" "" "や") ("yu" "" "ゆ") ("ye" "" "いぇ") ("yo" "" "よ") ("xca" "" "ヵ") ("xka" "" "ヵ") ("xke" "" "ヶ") ("xya" "" "ゃ") ("xyu" "" "ゅ") ("xyo" "" "ょ") ("rr" "r" "っ") ("ra" "" "ら") ("ri" "" "り") ("ru" "" "る") ("re" "" "れ") ("ro" "" "ろ") ("ltu" "" "っ") ("ltsu" "" "っ") ("lya" "" "ゃ") ("lyi" "" "ぃ") ("lyu" "" "ゅ") ("lye" "" "ぇ") ("lyo" "" "ょ") ("rya" "" "りゃ") ("ryi" "" "りぃ") ("ryu" "" "りゅ") ("rye" "" "りぇ") ("ryo" "" "りょ") ("ww" "w" "っ") ("wa" "" "わ") ("wi" "" "うぃ") ("wu" "" "う") ("we" "" "うぇ") ("wo" "" "を") ("wha" "" "うぁ") ("whi" "" "うぃ") ("whu" "" "う") ("whe" "" "うぇ") ("who" "" "うぉ") ("vv" "v" "っ") ("va" "" "う゛ぁ") ("vi" "" "う゛ぃ") ("vu" "" "う゛") ("ve" "" "う゛ぇ") ("vo" "" "う゛ぉ") ("vya" "" "う゛ゃ") ("vyu" "" "う゛ゅ") ("vyo" "" "う゛ょ") ("zk" "" "↑") ("zj" "" "↓") ("zh" "" "←") ("zl" "" "→") ("z-" "" "〜") ("z[" "" "『") ("z]" "" "』") ("z," "" "‥") ("z." "" "…") ("z/" "" "・")))
(define ja-rk-rule-keep-consonant? #f)

;; custom-global-keys1.scm
(define generic-on-key '("zenkaku-hankaku" "<Shift> "))
(define generic-on-key? (make-key-predicate '("zenkaku-hankaku" "<Shift> ")))
(define generic-off-key '("zenkaku-hankaku" "<Shift> "))
(define generic-off-key? (make-key-predicate '("zenkaku-hankaku" "<Shift> ")))
(define generic-begin-conv-key '(" "))
(define generic-begin-conv-key? (make-key-predicate '(" ")))
(define generic-commit-key '("<IgnoreCase><Control>j" generic-return-key))
(define generic-commit-key? (make-key-predicate '("<IgnoreCase><Control>j" generic-return-key?)))
(define generic-cancel-key '("escape" "<Control>[" "<IgnoreCase><Control>g"))
(define generic-cancel-key? (make-key-predicate '("escape" "<Control>[" "<IgnoreCase><Control>g")))
(define generic-next-candidate-key '(" " "down" "<IgnoreCase><Control>n"))
(define generic-next-candidate-key? (make-key-predicate '(" " "down" "<IgnoreCase><Control>n")))
(define generic-prev-candidate-key '("up" "<IgnoreCase><Control>p"))
(define generic-prev-candidate-key? (make-key-predicate '("up" "<IgnoreCase><Control>p")))
(define generic-next-page-key '("next"))
(define generic-next-page-key? (make-key-predicate '("next")))
(define generic-prev-page-key '("prior"))
(define generic-prev-page-key? (make-key-predicate '("prior")))

;; custom-global-keys2.scm
(define generic-beginning-of-preedit-key '("home" "<IgnoreCase><Control>a"))
(define generic-beginning-of-preedit-key? (make-key-predicate '("home" "<IgnoreCase><Control>a")))
(define generic-end-of-preedit-key '("end" "<IgnoreCase><Control>e"))
(define generic-end-of-preedit-key? (make-key-predicate '("end" "<IgnoreCase><Control>e")))
(define generic-kill-key '("<IgnoreCase><Control>k"))
(define generic-kill-key? (make-key-predicate '("<IgnoreCase><Control>k")))
(define generic-kill-backward-key '("<IgnoreCase><Control>u"))
(define generic-kill-backward-key? (make-key-predicate '("<IgnoreCase><Control>u")))
(define generic-backspace-key '("backspace" "<IgnoreCase><Control>h"))
(define generic-backspace-key? (make-key-predicate '("backspace" "<IgnoreCase><Control>h")))
(define generic-delete-key '("delete" "<IgnoreCase><Control>d"))
(define generic-delete-key? (make-key-predicate '("delete" "<IgnoreCase><Control>d")))
(define generic-go-left-key '("left" "<IgnoreCase><Control>b"))
(define generic-go-left-key? (make-key-predicate '("left" "<IgnoreCase><Control>b")))
(define generic-go-right-key '("right" "<IgnoreCase><Control>f"))
(define generic-go-right-key? (make-key-predicate '("right" "<IgnoreCase><Control>f")))
(define generic-return-key '("return" "<IgnoreCase><Control>m"))
(define generic-return-key? (make-key-predicate '("return" "<IgnoreCase><Control>m")))

;; custom-skk.scm
(define skk-use-candidate-window? #t)
(define skk-commit-candidate-by-label-key? #t)
(define skk-candidate-selection-style 'ddskk-like)
(define skk-use-manual-candwin-setting? #f)
(define skk-candidate-op-count 5)
(define skk-nr-candidate-max 7)
(define skk-widgets '(widget_skk_input_mode))
(define default-widget_skk_input_mode 'action_skk_latin)
(define skk-input-mode-actions '(action_skk_latin action_skk_hiragana action_skk_katakana action_skk_hankana action_skk_wide_latin))
(define default-widget_skk_kana_input_method 'action_skk_roma)
(define skk-kana-input-method-actions '(action_skk_roma))

;; custom-skk-dict.scm
(define skk-use-skkserv? #f)
(define skk-skkserv-enable-completion? #f)
(define skk-skkserv-completion-timeout 2000)
(define skk-skkserv-use-env? #t)
(define skk-skkserv-hostname "localhost")
(define skk-skkserv-portnum 1178)
(define skk-skkserv-address-family 'unspecified)
(define skk-dic-file-name "/usr/share/skk/SKK-JISYO")
(define skk-personal-dic-filename "/home/tounai/.skk-jisyo")
(define skk-uim-personal-dic-filename "/home/tounai/.skk-uim-jisyo")

;; custom-skk-advanced.scm
(define skk-style 'skk-style-ddskk-like)
(define skk-use-recursive-learning? #t)
(define skk-use-numeric-conversion? #t)
(define skk-auto-start-henkan? #f)
(define skk-dcomp-activate? #f)
(define skk-use-look? #f)
(define skk-look-dict "/usr/share/dict/words")
(define skk-show-annotation? #f)
(define skk-show-annotation-in-preedit? #f)
(define skk-use-with-vi? #t)
(define skk-egg-like-newline? #f)
(define skk-commit-newline-explicitly? #f)

;; custom-skk-keys1.scm
(define skk-on-key '("<IgnoreCase><Control>j" generic-on-key))
(define skk-on-key? (make-key-predicate '("<IgnoreCase><Control>j" generic-on-key?)))
(define skk-latin-key '("<IgnoreCase>l" generic-off-key))
(define skk-latin-key? (make-key-predicate '("<IgnoreCase>l" generic-off-key?)))
(define skk-wide-latin-key '("<IgnoreCase><Shift>l"))
(define skk-wide-latin-key? (make-key-predicate '("<IgnoreCase><Shift>l")))
(define skk-kcode-input-key '("yen"))
(define skk-kcode-input-key? (make-key-predicate '("yen")))
(define skk-kanji-mode-key '("<IgnoreCase><Shift>q"))
(define skk-kanji-mode-key? (make-key-predicate '("<IgnoreCase><Shift>q")))
(define skk-hankaku-kana-key '("<IgnoreCase><Control>q"))
(define skk-hankaku-kana-key? (make-key-predicate '("<IgnoreCase><Control>q")))
(define skk-kana-toggle-key '("<IgnoreCase>q"))
(define skk-kana-toggle-key? (make-key-predicate '("<IgnoreCase>q")))
(define skk-begin-conv-key '(generic-begin-conv-key))
(define skk-begin-conv-key? (make-key-predicate '(generic-begin-conv-key?)))
(define skk-commit-key '("<IgnoreCase><Control>j"))
(define skk-commit-key? (make-key-predicate '("<IgnoreCase><Control>j")))
(define skk-cancel-key '(generic-cancel-key))
(define skk-cancel-key? (make-key-predicate '(generic-cancel-key?)))
(define skk-sticky-key '())
(define skk-sticky-key? (make-key-predicate '()))

;; custom-skk-keys2.scm
(define skk-return-key '(generic-return-key))
(define skk-return-key? (make-key-predicate '(generic-return-key?)))
(define skk-latin-conv-key '("/"))
(define skk-latin-conv-key? (make-key-predicate '("/")))
(define skk-conv-wide-latin-key '("<IgnoreCase><Control>q"))
(define skk-conv-wide-latin-key? (make-key-predicate '("<IgnoreCase><Control>q")))
(define skk-conv-opposite-case-key '("<IgnoreCase><Control>u"))
(define skk-conv-opposite-case-key? (make-key-predicate '("<IgnoreCase><Control>u")))
(define skk-begin-completion-key '("tab" "<IgnoreCase><Control>i" skk-new-completion-from-current-comp-key))
(define skk-begin-completion-key? (make-key-predicate '("tab" "<IgnoreCase><Control>i" skk-new-completion-from-current-comp-key?)))
(define skk-next-completion-key '("." "tab" "<IgnoreCase><Control>i"))
(define skk-next-completion-key? (make-key-predicate '("." "tab" "<IgnoreCase><Control>i")))
(define skk-prev-completion-key '(","))
(define skk-prev-completion-key? (make-key-predicate '(",")))
(define skk-new-completion-from-current-comp-key '("<Alt>tab" "<IgnoreCase><Control><Alt>i"))
(define skk-new-completion-from-current-comp-key? (make-key-predicate '("<Alt>tab" "<IgnoreCase><Control><Alt>i")))
(define skk-special-midashi-key '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?"))
(define skk-special-midashi-key? (make-key-predicate '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?")))
(define skk-vi-escape-key '("escape" "<Control>["))
(define skk-vi-escape-key? (make-key-predicate '("escape" "<Control>[")))
(define skk-state-direct-no-preedit-nop-key '("<IgnoreCase><Control>j"))
(define skk-state-direct-no-preedit-nop-key? (make-key-predicate '("<IgnoreCase><Control>j")))
(define skk-purge-candidate-key '("<IgnoreCase><Shift>x"))
(define skk-purge-candidate-key? (make-key-predicate '("<IgnoreCase><Shift>x")))

;; custom-skk-keys3.scm
(define skk-begin-conv-with-completion-key '("<Alt> "))
(define skk-begin-conv-with-completion-key? (make-key-predicate '("<Alt> ")))
(define skk-commit-with-conv-completion-key '("<IgnoreCase><Control><Alt>j"))
(define skk-commit-with-conv-completion-key? (make-key-predicate '("<IgnoreCase><Control><Alt>j")))
(define skk-next-candidate-key '(generic-next-candidate-key))
(define skk-next-candidate-key? (make-key-predicate '(generic-next-candidate-key?)))
(define skk-prev-candidate-key '("<IgnoreCase>x" generic-prev-candidate-key))
(define skk-prev-candidate-key? (make-key-predicate '("<IgnoreCase>x" generic-prev-candidate-key?)))
(define skk-next-page-key '(generic-next-page-key))
(define skk-next-page-key? (make-key-predicate '(generic-next-page-key?)))
(define skk-prev-page-key '(generic-prev-page-key))
(define skk-prev-page-key? (make-key-predicate '(generic-prev-page-key?)))
(define skk-backspace-key '(generic-backspace-key))
(define skk-backspace-key? (make-key-predicate '(generic-backspace-key?)))
(define skk-go-left-key '(generic-go-left-key))
(define skk-go-left-key? (make-key-predicate '(generic-go-left-key?)))
(define skk-go-right-key '(generic-go-right-key))
(define skk-go-right-key? (make-key-predicate '(generic-go-right-key?)))

