(require-module "japanese")
(require-module "skk")

(define default-im-name                     'skk)
(define enable-im-toggle?                   #f)
(define candidate-window-style              'horizontal)
(define bridge-show-input-state?            #t)
(define bridge-show-with?                   'time)
(define bridge-show-input-state-time-length 1)
(define skk-show-annotation?                #f)
(define skk-show-annotation-in-preedit?     #f)
(define enable-annotation?                  #f)
(define uim-xim-use-xft-font?               #t)
(define uim-xim-xft-font-name               "TakaoExGothic")
(define skk-widgets                         '(widget_skk_input_mode))
(define skk-uim-personal-dic-filename       "/home/tounai/Dropbox/temp/skk-uim-jisyo")
(define skk-auto-start-henkan?              #f)
(define skk-dcomp-activate?                 #t)
(define skk-use-with-vi?                    #t)

(define-key skk-sticky-key?           '(";"))
(define-key skk-begin-completion-key? '("tab" "<IgnoreCase><Control>i"))
(define-key skk-next-completion-key?  '("tab" "<IgnoreCase><Control>i"))
(define-key skk-prev-completion-key?  '("<Shift>tab" "<IgnoreCase><Control>o"))

;; custom-global.scm
;; (define custom-activate-default-im-name? #f)
;; (define custom-preserved-default-im-name 'direct)
;; (define default-im-name #f)
;; (define enabled-im-list '(skk))
;; (define enable-im-switch? #f)
;; (define switch-im-key '("<Control>Shift_key" "<Shift>Control_key"))
;; (define switch-im-key? (make-key-predicate '("<Control>Shift_key" "<Shift>Control_key")))
;; (define switch-im-skip-direct-im? #f)
;; (define enable-im-toggle? #t)
;; (define toggle-im-key '("<Meta> "))
;; (define toggle-im-key? (make-key-predicate '("<Meta> ")))
;; (define toggle-im-alt-im 'direct)
;; (define uim-color 'uim-color-uim)
;; (define candidate-window-style 'vertical)
;; (define candidate-window-position 'caret)
;; (define enable-lazy-loading? #t)
;; (define bridge-show-input-state? #f)
;; (define bridge-show-with? 'time)
;; (define bridge-show-input-state-time-length 3)

;; custom-toolbar.scm
;; (define toolbar-display-time 'always)
;; (define toolbar-show-action-based-switcher-button? #t)
;; (define imsw-coverage 'system-global)
;; (define toolbar-show-switcher-button? #f)
;; (define toolbar-show-pref-button? #t)
;; (define toolbar-show-dict-button? #f)
;; (define toolbar-show-input-pad-button? #f)
;; (define toolbar-show-handwriting-input-pad-button? #f)
;; (define toolbar-show-help-button? #f)
;; (define toolbar-help-browser 'system)
;; (define toolbar-help-browser-name "firefox")
;; (define toolbar-icon-for-dark-background? #f)

;; custom-annotation.scm
;; (define skk-show-annotation? #t)
;; (define skk-show-annotation-in-preedit? #f)
;; (define enable-annotation? #t)
;; (define annotation-agent 'eb)
;; (define eb-enable-for-annotation? #f)
;; (define annotation-eb-dic-path "/usr/share/dict")
;; (define annotation-dict-server "dict.org")
;; (define annotation-dict-servname 2628)
;; (define annotation-dict-database "web1913")
;; (define annotation-dict-cache-words 256)
;; (define annotation-filter-server-setting? 'pipe)
;; (define annotation-filter-unix-domain-socket-path "/path/of/socket")
;; (define annotation-filter-tcpserver-name "localhost")
;; (define annotation-filter-tcpserver-port 6789)
;; (define annotation-filter-command "/path/of/filter-program")

;; custom-xim.scm
;; (define uim-xim-use-xft-font? #f)
;; (define uim-xim-xft-font-name "Sans")

;; custom-notify.scm
;; (define notify-agent 'stderr)

;; custom-http.scm
;; (define http-proxy-setting 'direct)
;; (define http-proxy-hostname "localhost")
;; (define http-proxy-port 8080)
;; (define http-timeout 3000)

;; custom-predict.scm
;; (define predict-custom-enable? #f)
;; (define predict-custom-methods '())
;; (define predict-custom-look-dict "/usr/share/dict/words")
;; (define predict-custom-look-candidates-max 10)
;; (define predict-custom-look-skk-jisyo "/usr/share/skk/SKK-JISYO.L")
;; (define predict-custom-look-skk-candidates-max 10)
;; (define predict-custom-sqlite3-candidates-max 5)
;; (define predict-custom-google-suggest-candidates-max 5)
;; (define predict-custom-google-suggest-language 'en)
;; (define predict-custom-google-suggest-use-ssl #t)

;; custom-ja-rk-rule.scm
;; (define ja-rk-rule-type 'uim)
;; (define ja-rk-rule-table-basic '(("-" "" "□") ("," "" "﹜") ("." "" "﹝") ("!" "" "〞") ("\"" "" "﹎") ("#" "" "↑") ("$" "" "♀") ("%" "" "☉") ("&" "" "↓") ("'" "" "﹊") ("(" "" "﹋") (")" "" "﹌") ("~" "" "℅") ("=" "" "﹥") ("^" "" "※") ("\\" "" "㊣") ("|" "" "￣") ("`" "" "﹉") ("@" "" "→") ("{" "" "－") ("[" "" "＞") ("+" "" "≒") (";" "" "”") ("*" "" "←") (":" "" "“") ("}" "" "×") ("]" "" "＝") ("<" "" "∼") (">" "" "∩") ("?" "" "〝") ("/" "" "▼") ("_" "" "〃") ("yen" "" "∴") ("1" "" "1") ("2" "" "2") ("3" "" "3") ("4" "" "4") ("5" "" "5") ("6" "" "6") ("7" "" "7") ("8" "" "8") ("9" "" "9") ("0" "" "0") ("a" "" "丐") ("i" "" "中") ("u" "" "丹") ("e" "" "尹") ("o" "" "云") ("xa" "" "丑") ("xi" "" "不") ("xyi" "" "不") ("xu" "" "丰") ("xe" "" "之") ("xye" "" "之") ("xo" "" "予") ("la" "" "丑") ("li" "" "不") ("lu" "" "丰") ("le" "" "之") ("lo" "" "予") ("kk" "k" "勻") ("ka" "" "井") ("ki" "" "五") ("ku" "" "仁") ("ke" "" "仃") ("ko" "" "仇") ("kya" "" "五扎") ("kyi" "" "五不") ("kyu" "" "五文") ("kye" "" "五之") ("kyo" "" "五斤") ("gg" "g" "勻") ("ga" "" "互") ("gi" "" "亢") ("gu" "" "什") ("ge" "" "仆") ("go" "" "仍") ("gya" "" "亢扎") ("gyi" "" "亢不") ("gyu" "" "亢文") ("gye" "" "亢之") ("gyo" "" "亢斤") ("qa" "" "仁丑") ("qi" "" "仁不") ("qu" "" "仁") ("qe" "" "仁之") ("qo" "" "仁予") ("ss" "s" "勻") ("sa" "" "今") ("si" "" "仄") ("su" "" "允") ("se" "" "六") ("so" "" "公") ("sya" "" "仄扎") ("syi" "" "仄不") ("syu" "" "仄文") ("sye" "" "仄之") ("syo" "" "仄斤") ("zz" "z" "勻") ("za" "" "介") ("zi" "" "元") ("zu" "" "內") ("ze" "" "兮") ("zo" "" "冗") ("zya" "" "元扎") ("zyi" "" "元不") ("zyu" "" "元文") ("zye" "" "元之") ("zyo" "" "元斤") ("jj" "j" "勻") ("ja" "" "元扎") ("ji" "" "元") ("ju" "" "元文") ("je" "" "元之") ("jo" "" "元斤") ("jya" "" "元扎") ("jyi" "" "元不") ("jyu" "" "元文") ("jye" "" "元之") ("jyo" "" "元斤") ("tt" "t" "勻") ("tc" "c" "勻") ("ta" "" "凶") ("ti" "" "切") ("tu" "" "勾") ("te" "" "化") ("to" "" "午") ("tya" "" "切扎") ("tyi" "" "切不") ("tyu" "" "切文") ("tye" "" "切之") ("tyo" "" "切斤") ("tsa" "" "勾丑") ("tsi" "" "勾不") ("tsu" "" "勾") ("tse" "" "勾之") ("tso" "" "勾予") ("cya" "" "切扎") ("cyi" "" "切不") ("cyu" "" "切文") ("cye" "" "切之") ("cyo" "" "切斤") ("xtu" "" "勻") ("xtsu" "" "勻") ("cc" "c" "勻") ("dd" "d" "勻") ("da" "" "分") ("di" "" "刈") ("du" "" "勿") ("de" "" "匹") ("do" "" "升") ("dya" "" "刈扎") ("dyi" "" "刈不") ("dyu" "" "刈文") ("dye" "" "刈之") ("dyo" "" "刈斤") ("nn" "" "氏") ("n'" "" "氏") ("n" "" "氏") ("na" "" "卅") ("ni" "" "卞") ("nu" "" "厄") ("ne" "" "友") ("no" "" "及") ("nya" "" "卞扎") ("nyi" "" "卞不") ("nyu" "" "卞文") ("nye" "" "卞之") ("nyo" "" "卞斤") ("hh" "h" "勻") ("ha" "" "反") ("hi" "" "夫") ("hu" "" "孔") ("he" "" "尺") ("ho" "" "幻") ("hya" "" "夫扎") ("hyi" "" "夫不") ("hyu" "" "夫文") ("hye" "" "夫之") ("hyo" "" "夫斤") ("ff" "f" "勻") ("fa" "" "孔丑") ("fi" "" "孔不") ("fu" "" "孔") ("fe" "" "孔之") ("fo" "" "孔予") ("fya" "" "孔扎") ("fyi" "" "孔不") ("fyu" "" "孔文") ("fye" "" "孔之") ("fyo" "" "孔斤") ("bb" "b" "勻") ("ba" "" "壬") ("bi" "" "太") ("bu" "" "少") ("be" "" "屯") ("bo" "" "廿") ("bya" "" "太扎") ("byi" "" "太不") ("byu" "" "太文") ("bye" "" "太之") ("byo" "" "太斤") ("pp" "p" "勻") ("pa" "" "天") ("pi" "" "夭") ("pu" "" "尤") ("pe" "" "巴") ("po" "" "弔") ("pya" "" "夭扎") ("pyi" "" "夭不") ("pyu" "" "夭文") ("pye" "" "夭之") ("pyo" "" "夭斤") ("mm" "m" "勻") ("mb" "b" "氏") ("mp" "p" "氏") ("ma" "" "引") ("mi" "" "心") ("mu" "" "戈") ("me" "" "戶") ("mo" "" "手") ("mya" "" "心扎") ("myi" "" "心不") ("myu" "" "心文") ("mye" "" "心之") ("myo" "" "心斤") ("yy" "y" "勻") ("ya" "" "支") ("yu" "" "斗") ("ye" "" "中之") ("yo" "" "方") ("xca" "" "仰") ("xka" "" "仰") ("xke" "" "仳") ("xya" "" "扎") ("xyu" "" "文") ("xyo" "" "斤") ("rr" "r" "勻") ("ra" "" "日") ("ri" "" "曰") ("ru" "" "月") ("re" "" "木") ("ro" "" "欠") ("ltu" "" "勻") ("ltsu" "" "勻") ("lya" "" "扎") ("lyi" "" "不") ("lyu" "" "文") ("lye" "" "之") ("lyo" "" "斤") ("rya" "" "曰扎") ("ryi" "" "曰不") ("ryu" "" "曰文") ("rye" "" "曰之") ("ryo" "" "曰斤") ("ww" "w" "勻") ("wa" "" "歹") ("wi" "" "丹不") ("wu" "" "丹") ("we" "" "丹之") ("wo" "" "毛") ("wha" "" "丹丑") ("whi" "" "丹不") ("whu" "" "丹") ("whe" "" "丹之") ("who" "" "丹予") ("vv" "v" "勻") ("va" "" "丹‵丑") ("vi" "" "丹‵不") ("vu" "" "丹‵") ("ve" "" "丹‵之") ("vo" "" "丹‵予") ("vya" "" "丹‵扎") ("vyu" "" "丹‵文") ("vyo" "" "丹‵斤") ("zk" "" "╱") ("zj" "" "╲") ("zh" "" "◤") ("zl" "" "◥") ("z-" "" "℅") ("z[" "" "≦") ("z]" "" "≧") ("z," "" "ˍ") ("z." "" "＿") ("z/" "" "’")))
;; (define ja-rk-rule-keep-consonant? #f)

;; custom-global-keys1.scm
;; (define generic-on-key '("zenkaku-hankaku" "<Shift> "))
;; (define generic-on-key? (make-key-predicate '("zenkaku-hankaku" "<Shift> ")))
;; (define generic-off-key '("zenkaku-hankaku" "<Shift> "))
;; (define generic-off-key? (make-key-predicate '("zenkaku-hankaku" "<Shift> ")))
;; (define generic-begin-conv-key '(" "))
;; (define generic-begin-conv-key? (make-key-predicate '(" ")))
;; (define generic-commit-key '("<IgnoreCase><Control>j" generic-return-key))
;; (define generic-commit-key? (make-key-predicate '("<IgnoreCase><Control>j" generic-return-key?)))
;; (define generic-cancel-key '("escape" "<Control>[" "<IgnoreCase><Control>g"))
;; (define generic-cancel-key? (make-key-predicate '("escape" "<Control>[" "<IgnoreCase><Control>g")))
;; (define generic-next-candidate-key '(" " "down" "<IgnoreCase><Control>n"))
;; (define generic-next-candidate-key? (make-key-predicate '(" " "down" "<IgnoreCase><Control>n")))
;; (define generic-prev-candidate-key '("up" "<IgnoreCase><Control>p"))
;; (define generic-prev-candidate-key? (make-key-predicate '("up" "<IgnoreCase><Control>p")))
;; (define generic-next-page-key '("next"))
;; (define generic-next-page-key? (make-key-predicate '("next")))
;; (define generic-prev-page-key '("prior"))
;; (define generic-prev-page-key? (make-key-predicate '("prior")))

;; custom-global-keys2.scm
;; (define generic-beginning-of-preedit-key '("home" "<IgnoreCase><Control>a"))
;; (define generic-beginning-of-preedit-key? (make-key-predicate '("home" "<IgnoreCase><Control>a")))
;; (define generic-end-of-preedit-key '("end" "<IgnoreCase><Control>e"))
;; (define generic-end-of-preedit-key? (make-key-predicate '("end" "<IgnoreCase><Control>e")))
;; (define generic-kill-key '("<IgnoreCase><Control>k"))
;; (define generic-kill-key? (make-key-predicate '("<IgnoreCase><Control>k")))
;; (define generic-kill-backward-key '("<IgnoreCase><Control>u"))
;; (define generic-kill-backward-key? (make-key-predicate '("<IgnoreCase><Control>u")))
;; (define generic-backspace-key '("backspace" "<IgnoreCase><Control>h"))
;; (define generic-backspace-key? (make-key-predicate '("backspace" "<IgnoreCase><Control>h")))
;; (define generic-delete-key '("delete" "<IgnoreCase><Control>d"))
;; (define generic-delete-key? (make-key-predicate '("delete" "<IgnoreCase><Control>d")))
;; (define generic-go-left-key '("left" "<IgnoreCase><Control>b"))
;; (define generic-go-left-key? (make-key-predicate '("left" "<IgnoreCase><Control>b")))
;; (define generic-go-right-key '("right" "<IgnoreCase><Control>f"))
;; (define generic-go-right-key? (make-key-predicate '("right" "<IgnoreCase><Control>f")))
;; (define generic-return-key '("return" "<IgnoreCase><Control>m"))
;; (define generic-return-key? (make-key-predicate '("return" "<IgnoreCase><Control>m")))

;; custom-skk.scm
;; (define skk-use-candidate-window? #t)
;; (define skk-commit-candidate-by-label-key? #t)
;; (define skk-candidate-selection-style 'ddskk-like)
;; (define skk-use-manual-candwin-setting? #f)
;; (define skk-candidate-op-count 5)
;; (define skk-nr-candidate-max 7)
;; (define skk-widgets '(widget_skk_input_mode widget_skk_kana_input_method))
;; (define default-widget_skk_input_mode 'action_skk_latin)
;; (define skk-input-mode-actions '(action_skk_latin action_skk_hiragana action_skk_katakana action_skk_hankana action_skk_wide_latin))
;; (define default-widget_skk_kana_input_method 'action_skk_roma)
;; (define skk-kana-input-method-actions '(action_skk_roma action_skk_azik action_skk_act action_skk_kzik))

;; custom-skk-dict.scm
;; (define skk-use-skkserv? #f)
;; (define skk-skkserv-enable-completion? #f)
;; (define skk-skkserv-completion-timeout 2000)
;; (define skk-skkserv-use-env? #t)
;; (define skk-skkserv-hostname "localhost")
;; (define skk-skkserv-portnum 1178)
;; (define skk-skkserv-address-family 'unspecified)
;; (define skk-dic-file-name "/usr/share/skk/SKK-JISYO")
;; (define skk-personal-dic-filename "/home/tounai/.skk-jisyo")
;; (define skk-uim-personal-dic-filename "/home/tounai/.skk-uim-jisyo")

;; custom-skk-advanced.scm
;; (define skk-style 'skk-style-ddskk-like)
;; (define skk-use-recursive-learning? #t)
;; (define skk-use-numeric-conversion? #t)
;; (define skk-auto-start-henkan? #t)
;; (define skk-dcomp-activate? #f)
;; (define skk-use-look? #f)
;; (define skk-look-dict "/usr/share/dict/words")
;; (define skk-show-annotation? #t)
;; (define skk-show-annotation-in-preedit? #f)
;; (define skk-use-with-vi? #f)
;; (define skk-egg-like-newline? #f)
;; (define skk-commit-newline-explicitly? #f)

;; custom-skk-keys1.scm
;; (define skk-on-key '("<IgnoreCase><Control>j" generic-on-key))
;; (define skk-on-key? (make-key-predicate '("<IgnoreCase><Control>j" generic-on-key?)))
;; (define skk-latin-key '("<IgnoreCase>l" generic-off-key))
;; (define skk-latin-key? (make-key-predicate '("<IgnoreCase>l" generic-off-key?)))
;; (define skk-wide-latin-key '("<IgnoreCase><Shift>l"))
;; (define skk-wide-latin-key? (make-key-predicate '("<IgnoreCase><Shift>l")))
;; (define skk-kcode-input-key '("yen"))
;; (define skk-kcode-input-key? (make-key-predicate '("yen")))
;; (define skk-kanji-mode-key '("<IgnoreCase><Shift>q"))
;; (define skk-kanji-mode-key? (make-key-predicate '("<IgnoreCase><Shift>q")))
;; (define skk-hankaku-kana-key '("<IgnoreCase><Control>q"))
;; (define skk-hankaku-kana-key? (make-key-predicate '("<IgnoreCase><Control>q")))
;; (define skk-kana-toggle-key '("<IgnoreCase>q"))
;; (define skk-kana-toggle-key? (make-key-predicate '("<IgnoreCase>q")))
;; (define skk-begin-conv-key '(generic-begin-conv-key))
;; (define skk-begin-conv-key? (make-key-predicate '(generic-begin-conv-key?)))
;; (define skk-commit-key '("<IgnoreCase><Control>j"))
;; (define skk-commit-key? (make-key-predicate '("<IgnoreCase><Control>j")))
;; (define skk-cancel-key '(generic-cancel-key))
;; (define skk-cancel-key? (make-key-predicate '(generic-cancel-key?)))
;; (define skk-sticky-key '())
;; (define skk-sticky-key? (make-key-predicate '()))

;; custom-skk-keys2.scm
;; (define skk-return-key '(generic-return-key))
;; (define skk-return-key? (make-key-predicate '(generic-return-key?)))
;; (define skk-latin-conv-key '("/"))
;; (define skk-latin-conv-key? (make-key-predicate '("/")))
;; (define skk-conv-wide-latin-key '("<IgnoreCase><Control>q"))
;; (define skk-conv-wide-latin-key? (make-key-predicate '("<IgnoreCase><Control>q")))
;; (define skk-conv-opposite-case-key '("<IgnoreCase><Control>u"))
;; (define skk-conv-opposite-case-key? (make-key-predicate '("<IgnoreCase><Control>u")))
;; (define skk-begin-completion-key '("tab" "<IgnoreCase><Control>i" skk-new-completion-from-current-comp-key))
;; (define skk-begin-completion-key? (make-key-predicate '("tab" "<IgnoreCase><Control>i" skk-new-completion-from-current-comp-key?)))
;; (define skk-next-completion-key '("." "tab" "<IgnoreCase><Control>i"))
;; (define skk-next-completion-key? (make-key-predicate '("." "tab" "<IgnoreCase><Control>i")))
;; (define skk-prev-completion-key '(","))
;; (define skk-prev-completion-key? (make-key-predicate '(",")))
;; (define skk-new-completion-from-current-comp-key '("<Alt>tab" "<IgnoreCase><Control><Alt>i"))
;; (define skk-new-completion-from-current-comp-key? (make-key-predicate '("<Alt>tab" "<IgnoreCase><Control><Alt>i")))
;; (define skk-special-midashi-key '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?"))
;; (define skk-special-midashi-key? (make-key-predicate '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?")))
;; (define skk-vi-escape-key '("escape" "<Control>["))
;; (define skk-vi-escape-key? (make-key-predicate '("escape" "<Control>[")))
;; (define skk-state-direct-no-preedit-nop-key '("<IgnoreCase><Control>j"))
;; (define skk-state-direct-no-preedit-nop-key? (make-key-predicate '("<IgnoreCase><Control>j")))
;; (define skk-purge-candidate-key '("<IgnoreCase><Shift>x"))
;; (define skk-purge-candidate-key? (make-key-predicate '("<IgnoreCase><Shift>x")))

;; custom-skk-keys3.scm
;; (define skk-begin-conv-with-completion-key '("<Alt> "))
;; (define skk-begin-conv-with-completion-key? (make-key-predicate '("<Alt> ")))
;; (define skk-commit-with-conv-completion-key '("<IgnoreCase><Control><Alt>j"))
;; (define skk-commit-with-conv-completion-key? (make-key-predicate '("<IgnoreCase><Control><Alt>j")))
;; (define skk-next-candidate-key '(generic-next-candidate-key))
;; (define skk-next-candidate-key? (make-key-predicate '(generic-next-candidate-key?)))
;; (define skk-prev-candidate-key '("<IgnoreCase>x" generic-prev-candidate-key))
;; (define skk-prev-candidate-key? (make-key-predicate '("<IgnoreCase>x" generic-prev-candidate-key?)))
;; (define skk-next-page-key '(generic-next-page-key))
;; (define skk-next-page-key? (make-key-predicate '(generic-next-page-key?)))
;; (define skk-prev-page-key '(generic-prev-page-key))
;; (define skk-prev-page-key? (make-key-predicate '(generic-prev-page-key?)))
;; (define skk-backspace-key '(generic-backspace-key))
;; (define skk-backspace-key? (make-key-predicate '(generic-backspace-key?)))
;; (define skk-go-left-key '(generic-go-left-key))
;; (define skk-go-left-key? (make-key-predicate '(generic-go-left-key?)))
;; (define skk-go-right-key '(generic-go-right-key))
;; (define skk-go-right-key? (make-key-predicate '(generic-go-right-key?)))

;; vim: filetype=scheme fileencoding=euc-jp
