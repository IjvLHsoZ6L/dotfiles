(require-module "japanese")
(require-module "skk")

;; custom-global.scm
(define custom-activate-default-im-name?  #t)
(define custom-preserved-default-im-name 'skk)
(define default-im-name 'skk)
(define enabled-im-list '(skk))
(define enable-im-switch?  #f)
(define-key switch-im-key?  '())
(define enable-im-toggle?  #f)
(define uim-color 'uim-color-uim)
(define candidate-window-style 'horizontal)
(define candidate-window-position 'caret)
(define bridge-show-input-state? #t)
(define bridge-show-with? 'time)
(define bridge-show-input-state-time-length 1)
(define enable-lazy-loading? #t)

;; custom-toolbar.scm
(define toolbar-display-time 'never)

;; custom-annotation.scm
(define enable-annotation? #f)

;; custom-ja-rk-rule.scm
(define ja-rk-rule-type 'uim)
(define ja-rk-rule-keep-consonant? #t)

;; custom-global-keys1.scm
(define-key generic-on-key? '("zenkaku-hankaku" "<Control> "))
(define-key generic-off-key? '("zenkaku-hankaku" "<Control> "))
(define-key generic-begin-conv-key? '(" "))
(define-key generic-commit-key? '("<IgnoreCase><Control>j" "return" "<IgnoreCase><Control>m"))
(define-key generic-cancel-key? '("<IgnoreCase><Control>g" "escape" "<IgnoreShift><Control>["))
(define-key generic-next-candidate-key? '(" " "down" "<IgnoreCase><Control>n"))
(define-key generic-prev-candidate-key? '("<Shift> " "up" "<IgnoreCase><Control>p"))
(define-key generic-next-page-key? '("next"))
(define-key generic-prev-page-key? '("prior"))

;;-key custom-global-keys2.scm
(define-key generic-beginning-of-preedit-key? '("home" "<IgnoreCase><Control>a"))
(define-key generic-end-of-preedit-key? '("end" "<IgnoreCase><Control>e"))
(define-key generic-kill-key? '("<IgnoreCase><Control>k"))
(define-key generic-kill-backward-key? '("<IgnoreCase><Control>u"))
(define-key generic-backspace-key? '("backspace" "<IgnoreCase><Control>h"))
(define-key generic-delete-key? '("delete" "<IgnoreCase><Control>d"))
(define-key generic-go-left-key? '("left" "<IgnoreCase><Control>b"))
(define-key generic-go-right-key? '("right" "<IgnoreCase><Control>f"))
(define-key generic-return-key? '("return" "<IgnoreCase><Control>m"))

;; custom-skk.scm
(define skk-use-candidate-window? #t)
(define skk-commit-candidate-by-label-key? #t)
(define skk-candidate-selection-style 'ddskk-like)
(define skk-use-manual-candwin-setting? #f)
(define skk-widgets '(widget_skk_input_mode))
(define default-widget_skk_input_mode 'action_skk_latin)
(define skk-input-mode-actions
  '(action_skk_latin action_skk_hiragana action_skk_katakana action_skk_hankana action_skk_wide_latin))
(define default-widget_skk_kana_input_method 'action_skk_roma)
(define skk-kana-input-method-actions '(action_skk_roma))

;; custom-skk-dict.scm
(define skk-use-skkserv? #f)
(define skk-dic-file-name "/usr/share/skk/SKK-JISYO")
(define skk-personal-dic-filename "/home/tounai/Dropbox/skk-jisyo")
(define skk-uim-personal-dic-filename "/home/tounai/Dropbox/skk-uim-jisyo")

;; custom-skk-advanced.scm
(define skk-style 'skk-style-ddskk-like)
(define skk-use-recursive-learning? #t)
(define skk-use-numeric-conversion? #t)
(define skk-auto-start-henkan? #f)
(define skk-dcomp-activate? #t)
(define skk-use-look? #f)
(define skk-show-annotation? #f)
(define skk-show-annotation-in-preedit? #f)
(define skk-use-with-vi? #t)
(define skk-egg-like-newline? #f)
(define skk-commit-newline-explicitly? #f)

;; custom-skk-keys1.scm
(define-key skk-on-key? '("<IgnoreCase><Control>j" "zenkaku-hankaku" "<Control> "))
(define-key skk-latin-key? '("<IgnoreCase>l" "zenkaku-hankaku" "<Control> "))
(define-key skk-wide-latin-key? '("<IgnoreCase><Shift>l"))
(define-key skk-kcode-input-key? '("yen"))
(define-key skk-kanji-mode-key? '("<IgnoreCase><Shift>q"))
(define-key skk-hankaku-kana-key? '("<IgnoreCase><Control>q"))
(define-key skk-kana-toggle-key? '("<IgnoreCase>q"))
(define-key skk-begin-conv-key? '(" "))
(define-key skk-commit-key? '("<IgnoreCase><Control>j"))
(define-key skk-cancel-key? '("<IgnoreCase><Control>g" "escape" "<IgnoreShift><Control>["))
(define-key skk-sticky-key? '("<IgnoreShift>;"))

;; custom-skk-keys2.scm
(define-key skk-return-key? '("return" "<IgnoreCase><Control>m"))
(define-key skk-latin-conv-key? '("<IgnoreShift>/"))
(define-key skk-conv-wide-latin-key? '())
(define-key skk-conv-opposite-case-key? '())
(define-key skk-begin-completion-key? '("tab" "<IgnoreCase><Control>i"))
(define-key skk-next-completion-key? '("tab" "<IgnoreCase><Control>i"))
(define-key skk-prev-completion-key? '("<Shift>tab" "<IgnoreCase><Control>u"))
(define-key skk-new-completion-from-current-comp-key? '("<IgnoreCase><Control>o"))
(define-key skk-special-midashi-key? '("<IgnoreShift>>" "<IgnoreShift><"))
(define-key skk-vi-escape-key? '("escape" "<IgnoreShift><Control>["))
(define-key skk-state-direct-no-preedit-nop-key? '("<IgnoreCase><Control>j"))
(define-key skk-purge-candidate-key? '("<IgnoreCase><Shift>x"))

;; custom-skk-keys3.scm
(define-key skk-begin-conv-with-completion-key? '())
(define-key skk-commit-with-conv-completion-key? '())
(define-key skk-next-candidate-key? '(" " "down" "<IgnoreCase><Control>n"))
(define-key skk-prev-candidate-key? '("<Shift> " "up" "<IgnoreCase><Control>p"))
(define-key skk-next-page-key? '("next"))
(define-key skk-prev-page-key? '("prior"))
(define-key skk-backspace-key? '("backspace" "<IgnoreCase><Control>h"))
(define-key skk-go-left-key? '("left" "<IgnoreCase><Control>b"))
(define-key skk-go-right-key? '("right" "<IgnoreCase><Control>f"))

;; vim: ft=scheme fenc=euc-jp
